{"version":3,"sources":["assets/placeholder/forecast-placeholder.svg","components/shared/BaseSelect.tsx","components/shared/BaseDateInput.tsx","serveses/DateHelper.ts","serveses/WeatherApiService.ts","components/view/WeatherCard.tsx","components/view/ForecastCard.tsx","App.tsx","index.tsx"],"names":["BaseSelect","props","placeholder","options","onChangeOption","useState","isActive","setIsActive","value","setValue","optionsList","map","option","id","name","className","onBlur","onFocus","onChange","event","foundOption","find","o","toString","target","hidden","style","color","BaseDateInput","minDate","maxDate","onChangeDate","type","min","max","onClick","selectedDate","Date","DateHelper","oneDayOffset","getDateString","date","dd","getDate","mm","getMonth","getFullYear","convertDateTimeToUTCTime","dateTime","Math","floor","convertUTCTimeToDate","time","convertDateToUserView","monthIndex","getMonthUserView","objToQueryString","obj","keyValuePairs","key","push","encodeURIComponent","join","apiKey","WeatherApiService","getWeatherIconURL","iconId","getPastDayForecast","city","callback","params","lat","latitude","lon","longitude","appid","dt","units","fetch","then","res","json","data","day","current","forecast","temperature","round","temp","weather","title","main","icon","catch","err","console","log","getSevenDaysForecast","daily","slice","WeatherCard","isAdaptiveWidth","isLoading","dayForecast","src","alt","ForecastCard","isSingleDateForecast","cities","forecastData","changeSelectedCity","changeSelectedDate","isScrolledToStart","setIsScrolledToStart","isScrolledToEnd","setIsScrolledToEnd","today","setTime","getTime","yesterday","dateFiveDaysAgo","fiveDaysAgo","weatherCardsSlides","useRef","forecastView","margin","width","ref","onScroll","scrollLeft","scrollWidth","offsetWidth","f","slides","scroll","placeholderView","forecastPlaceholderImage","App","pastDayForcastSelectedCity","setPastDayForcastSelectedCity","pastDayForcastSelectedDate","setPastDayForcastSelectedDate","pastDayForecastData","setPastDayForecastData","isPastDayForecastData","setIsPastDayForecastDataLoading","sevenDaysForcastSelectedCity","setSevenDaysForcastSelectedCity","sevenDaysForecastData","setSevenDaysForecastData","isSevenDaysForecastDataLoading","setIsSevenDaysForecastDataLoading","useEffect","selectedDateTimeUTC","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e58a1231.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/forecast-placeholder.1a743710.svg\";","import React, { useState } from \"react\";\nimport IBaseObject from \"../../models/IBaseObject\";\nimport \"./BaseSelect.scss\";\n\ninterface BaseSelectProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tplaceholder: string,\n\toptions: IBaseObject[],\n\tonChangeOption: Function\n};\n\nfunction BaseSelect(props: BaseSelectProps) {\n\tconst { placeholder, options, onChangeOption } = props;\n\n\tconst [isActive, setIsActive] = useState(false);\n\tconst [value, setValue] = useState(\"\");\n\n\tconst optionsList = !!options ? options.map((option: IBaseObject) =>\n\t\t<option value={option.id} key={option.id}>{option.name}</option>\n\t) : null;\n\n\tconst optionChanged = (event: any) => {\n\t\tconst foundOption: IBaseObject | undefined = options.find((o: IBaseObject) => o.id.toString() === event.target.value.toString());\n\t\tsetValue(event.target.value.toString());\n\t\tif (!!foundOption) {\n\t\t\tonChangeOption(foundOption);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={'select-component ' + (isActive ? 'select-component_active' : '')} onBlur={() => setIsActive(false)}>\n\t\t\t<select\n\t\t\t\tclassName={'select-component__select ' + (value === \"\" ? 'select-component__select_empty' : '')}\n\t\t\t\tonFocus={() => setIsActive(true)}\n\t\t\t\tonChange={optionChanged}>\n\t\t\t\t<option value=\"\" hidden style={{ color: 'red' }}>{placeholder}</option>\n\t\t\t\t{optionsList}\n\t\t\t</select>\n\t\t</div>\n\t);\n}\n\nexport default BaseSelect;\n","import React, { useState } from \"react\";\nimport \"./BaseDateInput.scss\";\n\ninterface BaseDateInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tplaceholder: string,\n\tminDate: string,\n\tmaxDate: string,\n\tonChangeDate: Function\n};\n\n\nfunction BaseDateInput(props: BaseDateInputProps) {\n\tconst { placeholder, minDate, maxDate, onChangeDate } = props;\n\n\tconst [isActive, setIsActive] = useState(false);\n\n\tconst dateChanged = (event: any) => {\n\t\tconst selectedDate = new Date(event.target.value);\n\t\tonChangeDate(selectedDate);\n\t}\n\n\treturn (\n\t\t<div className={'date-input-component ' + (isActive ? 'date-input-component_active' : '')} onBlur={() => setIsActive(false)}>\n\t\t\t<input type=\"date\"\n\t\t\t\tmin={minDate}\n\t\t\t\tmax={maxDate}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tclassName=\"date-input-component__input\"\n\t\t\t\tonClick={() => setIsActive(true)}\n\t\t\t\tonChange={dateChanged} />\n\t\t</div>\n\t);\n}\n\nexport default BaseDateInput;\n","const getMonthUserView = (monthIndex: number) => {\n\tswitch (monthIndex + 1) {\n\t\tcase 1:\n\t\t\treturn 'jan';\n\t\tcase 2:\n\t\t\treturn 'feb';\n\t\tcase 3:\n\t\t\treturn 'mar';\n\t\tcase 4:\n\t\t\treturn 'apr';\n\t\tcase 5:\n\t\t\treturn 'may';\n\t\tcase 6:\n\t\t\treturn 'june';\n\t\tcase 7:\n\t\t\treturn 'july';\n\t\tcase 8:\n\t\t\treturn 'aug';\n\t\tcase 9:\n\t\t\treturn 'sept';\n\t\tcase 10:\n\t\t\treturn 'oct';\n\t\tcase 11:\n\t\t\treturn 'nov';\n\t\tcase 12:\n\t\t\treturn 'dec';\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n}\n\nconst DateHelper = {\n\toneDayOffset: (24 * 60 * 60 * 1000),\n\tgetDateString(date: Date): string {\n\t\tlet dd: number | string = date.getDate();\n\t\tlet mm: number | string = date.getMonth() + 1;\n\t\tconst yyyy: number | string = date.getFullYear();\n\t\tif (dd < 10) {\n\t\t\tdd = '0' + dd;\n\t\t}\n\t\tif (mm < 10) {\n\t\t\tmm = '0' + mm;\n\t\t}\n\t\treturn (yyyy + '-' + mm + '-' + dd).toString();\n\t},\n\tconvertDateTimeToUTCTime(dateTime: number): number {\n\t\treturn Math.floor(dateTime / 1000);\n\t},\n\tconvertUTCTimeToDate(time: number): Date {\n\t\treturn new Date(time * 1000);\n\t},\n\tconvertDateToUserView(date: Date): string {\n\t\treturn `${date.getDate()} ${getMonthUserView(date.getMonth())} ${date.getFullYear()}`\n\t}\n\n}\n\nexport default DateHelper;","import ICity from \"../models/ICity\";\nimport IDayForecast from \"../models/IDayForecast\";\nimport DateHelper from \"./DateHelper\";\n\nconst objToQueryString = (obj: any) => {\n\tconst keyValuePairs = [];\n\tfor (const key in obj) {\n\t\tkeyValuePairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n\t}\n\treturn keyValuePairs.join('&');\n}\n\nconst apiKey = \"47059c77f16288ad28c4a6f1e475471f\";\nconst weatherIconBaseURL = \"http://openweathermap.org/img/wn/\";\n\nconst WeatherApiService = {\n\tgetWeatherIconURL: function (iconId: string): string {\n\t\treturn `${weatherIconBaseURL}${iconId}@2x.png`;\n\t},\n\tgetPastDayForecast: function (city: ICity, dateTime: number, callback: Function): void {\n\t\tconst params = {\n\t\t\tlat: city.latitude,\n\t\t\tlon: city.longitude,\n\t\t\tappid: apiKey,\n\t\t\tdt: dateTime,\n\t\t\tunits: \"metric\"\n\t\t};\n\t\tfetch(`https://api.openweathermap.org/data/2.5/onecall/timemachine?${objToQueryString(params)}`,)\n\t\t\t.then(res => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tlet day: any = data.current;\n\t\t\t\tconst forecast: IDayForecast = {\n\t\t\t\t\tdate: DateHelper.convertDateToUserView(DateHelper.convertUTCTimeToDate(day.dt)),\n\t\t\t\t\ttemperature: Math.round(day.temp),\n\t\t\t\t\tweather: {\n\t\t\t\t\t\ttitle: day.weather[0].main,\n\t\t\t\t\t\ticonId: day.weather[0].icon\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tcallback(forecast);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\tcallback(null);\n\t\t\t})\n\t},\n\tgetSevenDaysForecast: function (city: ICity, callback: Function): void {\n\t\tconst params = {\n\t\t\tlat: city.latitude,\n\t\t\tlon: city.longitude,\n\t\t\tappid: apiKey,\n\t\t\tunits: \"metric\"\n\t\t};\n\t\tfetch(`https://api.openweathermap.org/data/2.5/onecall?${objToQueryString(params)}`,)\n\t\t\t.then(res => res.json())\n\t\t\t.then((data) => {\n\t\t\t\tconst forecast: IDayForecast[] = data.daily.slice(1).map((day: any) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdate: DateHelper.convertDateToUserView(DateHelper.convertUTCTimeToDate(day.dt)),\n\t\t\t\t\t\ttemperature: Math.round(day.temp.day),\n\t\t\t\t\t\tweather: {\n\t\t\t\t\t\t\ttitle: day.weather[0].main,\n\t\t\t\t\t\t\ticonId: day.weather[0].icon\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcallback(forecast);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\tcallback(null);\n\t\t\t})\n\t},\n}\n\nexport default WeatherApiService;","import React from \"react\";\nimport IDayForecast from \"../../models/IDayForecast\";\nimport WeatherApiService from \"../../serveses/WeatherApiService\";\nimport \"./WeatherCard.scss\";\n\ninterface WeatherCardProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tisAdaptiveWidth: boolean,\n\tisLoading: boolean,\n\tdayForecast: IDayForecast,\n};\n\nfunction WeatherCard(props: WeatherCardProps) {\n\n\tconst { isAdaptiveWidth, isLoading, dayForecast } = props;\n\n\treturn (\n\t\t<div className={'weather-card ' + (isAdaptiveWidth ? 'weather-card_adaptive-width ' : '') + (isLoading ? 'weather-card_loading ' : '')}>\n\t\t\t<div className=\"weather-card__top\">\n\t\t\t\t<p className=\"weather-card__date\">{!!dayForecast ? dayForecast.date : ''}</p>\n\t\t\t</div>\n\t\t\t<div className=\"weather-card__middle\">\n\t\t\t\t{!!dayForecast &&\n\t\t\t\t\t<img src={WeatherApiService.getWeatherIconURL(dayForecast.weather.iconId)}\n\t\t\t\t\t\talt={dayForecast.weather.title}\n\t\t\t\t\t\ttitle={dayForecast.weather.title}\n\t\t\t\t\t\tclassName=\"weather-card__weather-icon\">\n\t\t\t\t\t</img>}\n\t\t\t</div>\n\t\t\t<div className=\"weather-card__bottom\">\n\t\t\t\t<p className=\"weather-card__temperature\">{!!dayForecast ? ((dayForecast.temperature > 0 ? '+' : '') + dayForecast.temperature + '°') : ''}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default WeatherCard;\n","import React, { useRef, useState } from \"react\";\nimport \"./ForecastCard.scss\";\nimport \"./CardsCarousel.scss\";\nimport forecastPlaceholderImage from \"../../assets/placeholder/forecast-placeholder.svg\";\nimport BaseSelect from \"../shared/BaseSelect\";\nimport BaseDateInput from \"../shared/BaseDateInput\";\nimport WeatherCard from \"./WeatherCard\";\nimport DateHelper from \"../../serveses/DateHelper\";\nimport ICity from \"../../models/ICity\";\nimport IDayForecast from \"../../models/IDayForecast\";\n\ninterface ForecastCardProps extends React.InputHTMLAttributes<HTMLInputElement> {\n\tisSingleDateForecast: boolean,\n\tcities: ICity[],\n\tforecastData: IDayForecast | IDayForecast[] | null,\n\tisLoading: boolean,\n\tchangeSelectedCity: Function,\n\tchangeSelectedDate: Function\n};\n\nfunction ForecastCard(props: ForecastCardProps) {\n\n\tconst { isSingleDateForecast, cities, forecastData, isLoading, changeSelectedCity, changeSelectedDate } = props;\n\n\tconst [isScrolledToStart, setIsScrolledToStart] = useState<boolean>(true);\n\tconst [isScrolledToEnd, setIsScrolledToEnd] = useState<boolean>(false);\n\n\tconst today: Date = new Date();\n\ttoday.setTime(today.getTime() - DateHelper.oneDayOffset);\n\tconst yesterday: string = DateHelper.getDateString(today);\n\tconst dateFiveDaysAgo: Date = new Date();\n\tdateFiveDaysAgo.setTime(dateFiveDaysAgo.getTime() - DateHelper.oneDayOffset * 5);\n\tconst fiveDaysAgo: string = DateHelper.getDateString(dateFiveDaysAgo);\n\n\tconst weatherCardsSlides = useRef(null);\n\tconst weatherCardWidth = 184;\n\n\tconst slidesScrolled = (event: any) => {\n\t\tif (event.target.scrollLeft === 0) {\n\t\t\tsetIsScrolledToStart(true);\n\t\t\tsetIsScrolledToEnd(false);\n\t\t} else if (event.target.scrollLeft === (event.target.scrollWidth - event.target.offsetWidth)) {\n\t\t\tsetIsScrolledToStart(false);\n\t\t\tsetIsScrolledToEnd(true);\n\t\t} else {\n\t\t\tsetIsScrolledToStart(false);\n\t\t\tsetIsScrolledToEnd(false);\n\t\t}\n\t}\n\n\tconst rightButtonClick = () => {\n\t\tif (!!weatherCardsSlides && !!weatherCardsSlides.current) {\n\t\t\tconst slides = (weatherCardsSlides!.current! as Element);\n\t\t\tslides.scroll(slides.scrollLeft + weatherCardWidth, 0);\n\t\t}\n\t};\n\tconst leftButtonClick = () => {\n\t\tif (!!weatherCardsSlides && !!weatherCardsSlides.current) {\n\t\t\tconst slides = (weatherCardsSlides!.current! as Element);\n\t\t\tslides.scroll(slides.scrollLeft - weatherCardWidth, 0);\n\t\t}\n\t};\n\n\tconst forecastView = isSingleDateForecast\n\t\t? (!!forecastData ? <div style={{ margin: '10px 0', width: '100%' }}>\n\t\t\t<WeatherCard\n\t\t\t\tisAdaptiveWidth={true}\n\t\t\t\tdayForecast={forecastData as IDayForecast}\n\t\t\t\tisLoading={isLoading}>\n\t\t\t</WeatherCard>\n\t\t</div> : null)\n\t\t: (!!forecastData ? <div className=\"cards-carousel\">\n\t\t\t<div className=\"cards-carousel__slides\" ref={weatherCardsSlides} onScroll={slidesScrolled}>\n\t\t\t\t{forecastData && (forecastData as IDayForecast[]).map((f: IDayForecast) =>\n\t\t\t\t\t<div key={f.date}>\n\t\t\t\t\t\t<WeatherCard\n\t\t\t\t\t\t\tisAdaptiveWidth={false}\n\t\t\t\t\t\t\tdayForecast={f}\n\t\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t\t></WeatherCard>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<button className={'cards-carousel__switch-button cards-carousel__switch-button_left '\n\t\t\t\t+ (isScrolledToStart ? 'cards-carousel__switch-button_disabled' : '')}\n\t\t\t\tonClick={leftButtonClick}>\n\t\t\t</button>\n\t\t\t<button\n\t\t\t\tclassName={'cards-carousel__switch-button cards-carousel__switch-button_right '\n\t\t\t\t\t+ (isScrolledToEnd ? 'cards-carousel__switch-button_disabled' : '')}\n\t\t\t\tonClick={rightButtonClick}>\n\t\t\t</button>\n\t\t</div > : null);\n\n\tconst placeholderView = (!forecastData &&\n\t\t<div className=\"forecast-card__placeholder\">\n\t\t\t<img src={forecastPlaceholderImage} alt=\"Cloud\" className=\"forecast-card__placeholder-image\">\n\t\t\t</img>\n\t\t\t<span className=\"forecast-card__placeholder-title\">\n\t\t\t\tFill in all the fields and the weather will be displayed\n\t\t\t</span>\n\t\t</div>);\n\n\treturn (\n\t\t<div className=\"forecast-card\">\n\t\t\t<div className={'forecast-card__header ' + (isSingleDateForecast ? 'forecast-card__header_long-title' : '')}>\n\t\t\t\t<h1 className=\"forecast-card__title\">{isSingleDateForecast ? 'Forecast for a Date in the Past' : '7 Days Forecast'}</h1>\n\t\t\t</div>\n\t\t\t<div className=\"forecast-card__search-bar\">\n\t\t\t\t<BaseSelect\n\t\t\t\t\tplaceholder={'Select city'}\n\t\t\t\t\toptions={cities}\n\t\t\t\t\tonChangeOption={(city: ICity) => changeSelectedCity(city, isSingleDateForecast)}>\n\t\t\t\t</BaseSelect>\n\t\t\t\t{isSingleDateForecast &&\n\t\t\t\t\t<BaseDateInput placeholder={'Select date'}\n\t\t\t\t\t\tminDate={fiveDaysAgo}\n\t\t\t\t\t\tmaxDate={yesterday}\n\t\t\t\t\t\tonChangeDate={changeSelectedDate}>\n\t\t\t\t\t</BaseDateInput>}\n\t\t\t</div>\n\t\t\t<div className=\"forecast-card__information\">\n\t\t\t\t{placeholderView}\n\t\t\t\t{forecastView}\n\t\t\t\t<div></div>\n\t\t\t</div>\n\t\t</div >\n\t);\n}\n\nexport default ForecastCard;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport ForecastCard from \"./components/view/ForecastCard\";\nimport IBaseObject from \"./models/IBaseObject\";\nimport ICity from \"./models/ICity\";\nimport IDayForecast from \"./models/IDayForecast\";\nimport DateHelper from \"./serveses/DateHelper\";\nimport WeatherApiService from \"./serveses/WeatherApiService\";\n\nfunction App() {\n\n\tconst [pastDayForcastSelectedCity, setPastDayForcastSelectedCity] = useState<ICity | null>(null);\n\tconst [pastDayForcastSelectedDate, setPastDayForcastSelectedDate] = useState<number | null>(null);\n\tconst [pastDayForecastData, setPastDayForecastData] = useState<IDayForecast | null>(null);\n\tconst [isPastDayForecastData, setIsPastDayForecastDataLoading] = useState<boolean>(false);\n\n\tconst [sevenDaysForcastSelectedCity, setSevenDaysForcastSelectedCity] = useState<ICity | null>(null);\n\tconst [sevenDaysForecastData, setSevenDaysForecastData] = useState<Array<IDayForecast> | null>(null);\n\tconst [isSevenDaysForecastDataLoading, setIsSevenDaysForecastDataLoading] = useState<boolean>(false);\n\n\n\tuseEffect(() => {\n\t\tif (!!pastDayForcastSelectedCity && !!pastDayForcastSelectedDate) {\n\t\t\tsetIsPastDayForecastDataLoading(true);\n\t\t\tWeatherApiService.getPastDayForecast(pastDayForcastSelectedCity,\n\t\t\t\tpastDayForcastSelectedDate, (data: IDayForecast) => {\n\t\t\t\t\tsetPastDayForecastData(data);\n\t\t\t\t\tsetIsPastDayForecastDataLoading(false);\n\t\t\t\t});\n\t\t}\n\t}, [pastDayForcastSelectedCity, pastDayForcastSelectedDate]);\n\n\tuseEffect(() => {\n\t\tif (!!sevenDaysForcastSelectedCity) {\n\t\t\tsetIsSevenDaysForecastDataLoading(true);\n\t\t\tWeatherApiService.getSevenDaysForecast(sevenDaysForcastSelectedCity,\n\t\t\t\t(data: IDayForecast[]) => {\n\t\t\t\t\tsetSevenDaysForecastData(data);\n\t\t\t\t\tsetIsSevenDaysForecastDataLoading(false);\n\t\t\t\t});\n\t\t}\n\t}, [sevenDaysForcastSelectedCity]);\n\n\tconst changeSelectedCity = (city: IBaseObject, isSingleDateForecast: boolean) => {\n\t\tif (isSingleDateForecast) {\n\t\t\tsetPastDayForcastSelectedCity(city as ICity);\n\t\t} else {\n\t\t\tsetSevenDaysForcastSelectedCity(city as ICity);\n\t\t}\n\t};\n\n\tconst changeSelectedDate = (selectedDate: Date) => {\n\t\tconst selectedDateTimeUTC = DateHelper.convertDateTimeToUTCTime(selectedDate.getTime() + Math.round(DateHelper.oneDayOffset / 2));\n\t\tsetPastDayForcastSelectedDate(selectedDateTimeUTC);\n\t};\n\n\tconst cities = [{\n\t\tid: 0,\n\t\tname: \"Самара\",\n\t\tlatitude: 53.195873,\n\t\tlongitude: 50.100193\n\t}, {\n\t\tid: 1,\n\t\tname: \"Тольятти\",\n\t\tlatitude: 53.507836,\n\t\tlongitude: 49.420393,\n\t}, {\n\t\tid: 2,\n\t\tname: \"Саратов\",\n\t\tlatitude: 51.533557,\n\t\tlongitude: 46.034257,\n\t}, {\n\t\tid: 3,\n\t\tname: \"Казань\",\n\t\tlatitude: 55.796127,\n\t\tlongitude: 49.106405\n\t}, {\n\t\tid: 4,\n\t\tname: \"Краснодар\",\n\t\tlatitude: 45.035470,\n\t\tlongitude: 38.975313\n\t},];\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<header className=\"app__header\">\n\t\t\t\t<p className=\"app__title\">\n\t\t\t\t\t<span>Weather</span>\n\t\t\t\t\t<span>forecast</span>\n\t\t\t\t</p>\n\t\t\t</header>\n\n\t\t\t<main className=\"app__main\">\n\t\t\t\t<div className=\"app__forecast-column\">\n\t\t\t\t\t<ForecastCard\n\t\t\t\t\t\tisSingleDateForecast={false}\n\t\t\t\t\t\tcities={cities}\n\t\t\t\t\t\tforecastData={sevenDaysForecastData}\n\t\t\t\t\t\tisLoading={isSevenDaysForecastDataLoading}\n\t\t\t\t\t\tchangeSelectedCity={changeSelectedCity}\n\t\t\t\t\t\tchangeSelectedDate={changeSelectedDate}></ForecastCard>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"app__forecast-column\">\n\t\t\t\t\t<ForecastCard\n\t\t\t\t\t\tisSingleDateForecast={true}\n\t\t\t\t\t\tcities={cities}\n\t\t\t\t\t\tforecastData={pastDayForecastData}\n\t\t\t\t\t\tisLoading={isPastDayForecastData}\n\t\t\t\t\t\tchangeSelectedCity={changeSelectedCity}\n\t\t\t\t\t\tchangeSelectedDate={changeSelectedDate}></ForecastCard>\n\t\t\t\t</div>\n\t\t\t</main>\n\n\t\t\t<footer className=\"app__footer\">\n\t\t\t\tC ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}